[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "pyelectron"
version = "0.1.0-alpha.1"
description = "A pragmatic Python desktop application framework with modern web UI"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "PyElectron Team", email = "team@pyelectron.dev"},
]
maintainers = [
    {name = "PyElectron Team", email = "team@pyelectron.dev"},
]
keywords = [
    "desktop",
    "gui", 
    "electron",
    "webview",
    "python",
    "cross-platform",
    "data-science",
    "ml",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Desktop Environment",
    "Topic :: Scientific/Engineering",
]
requires-python = ">=3.8"
dependencies = [
    # Core dependencies
    "aiofiles>=23.0.0",
    "click>=8.0.0",
    "watchdog>=3.0.0",
    "psutil>=5.9.0",
    
    # Platform-specific WebView (optional, handled in extras)
    # Will be installed based on platform detection
]

[project.optional-dependencies]
# Platform-specific WebView dependencies
windows = [
    "pywebview[cef]>=4.0.0; sys_platform == 'win32'",
]
macos = [
    "pyobjc-framework-WebKit>=9.0.0; sys_platform == 'darwin'",
    "pyobjc-framework-Cocoa>=9.0.0; sys_platform == 'darwin'",
]
linux = [
    "PyGObject>=3.42.0; sys_platform == 'linux'",
]

# Development dependencies
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "isort>=5.12.0",
    "pre-commit>=3.0.0",
]

# Documentation dependencies
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.22.0",
]

# Example dependencies for data science/ML
examples = [
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "matplotlib>=3.7.0",
    "scikit-learn>=1.3.0",
]

# All optional dependencies
all = [
    "pyelectron[windows,macos,linux,dev,docs,examples]",
]

[project.urls]
Homepage = "https://github.com/pyelectron/pyelectron"
Documentation = "https://pyelectron.readthedocs.io"
Repository = "https://github.com/pyelectron/pyelectron"
"Bug Tracker" = "https://github.com/pyelectron/pyelectron/issues"
Changelog = "https://github.com/pyelectron/pyelectron/blob/main/CHANGELOG.md"

[project.scripts]
pyelectron = "pyelectron.cli.main:cli"

[tool.setuptools.packages.find]
where = ["."]
include = ["pyelectron*"]
exclude = ["tests*", "docs*", "examples*"]

[tool.setuptools.package-data]
pyelectron = [
    "templates/**/*",
    "assets/**/*",
    "cli/templates/**/*",
]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["pyelectron"]

# MyPy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "watchdog.*",
    "psutil.*",
    "gi.*",
    "objc.*",
    "Foundation.*",
    "WebKit.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=pyelectron",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "platform: marks tests as platform-specific",
    "gui: marks tests that require GUI interaction",
]
asyncio_mode = "auto"

# Coverage configuration
[tool.coverage.run]
source = ["pyelectron"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
    "pyelectron/cli/templates/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"