name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        exclude:
          # Exclude some combinations to reduce CI time
          - os: windows-latest
            python-version: "3.8"
          - os: macos-latest
            python-version: "3.8"

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          python3-gi \
          python3-gi-cairo \
          gir1.2-gtk-3.0 \
          gir1.2-webkit2-4.0 \
          libgirepository1.0-dev \
          libcairo2-dev \
          pkg-config \
          python3-dev

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        # macOS comes with WebKit framework built-in
        echo "macOS WebKit dependencies are built-in"

    - name: Install system dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # WebView2 is pre-installed on Windows 10+
        echo "WebView2 should be available on Windows runners"

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Install platform-specific WebView dependencies
      run: |
        # Install platform-specific dependencies
        if [ "$RUNNER_OS" == "Linux" ]; then
          pip install "PyGObject>=3.42.0"
        elif [ "$RUNNER_OS" == "macOS" ]; then
          pip install "pyobjc-framework-WebKit>=9.0.0" "pyobjc-framework-Cocoa>=9.0.0"
        elif [ "$RUNNER_OS" == "Windows" ]; then
          pip install "pywebview[cef]>=4.0.0"
        fi
      shell: bash

    - name: Install PyElectron in development mode
      run: |
        pip install -e .

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 pyelectron --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 pyelectron --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Check code formatting with black
      run: |
        black --check --diff pyelectron tests

    - name: Check import sorting with isort
      run: |
        isort --check-only --diff pyelectron tests

    - name: Type check with mypy
      run: |
        mypy pyelectron --ignore-missing-imports

    - name: Test with pytest
      run: |
        pytest tests/ -v --cov=pyelectron --cov-report=xml --cov-report=term-missing
      env:
        # Set display for Linux GUI tests (headless)
        DISPLAY: ":99"

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  integration-tests:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          python3-gi \
          python3-gi-cairo \
          gir1.2-gtk-3.0 \
          gir1.2-webkit2-4.0 \
          libgirepository1.0-dev \
          xvfb

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install -e .

    - name: Run integration tests
      run: |
        xvfb-run -a pytest tests/integration/ -v --tb=short
      env:
        PYELECTRON_TEST_MODE: "1"

  security-scan:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: Security scan with safety
      run: |
        safety check -r requirements.txt -r requirements-dev.txt

    - name: Security scan with bandit
      run: |
        bandit -r pyelectron -f json -o bandit-report.json || true
        bandit -r pyelectron

  docs-build:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install -e .

    - name: Build documentation
      run: |
        mkdocs build --strict

    - name: Upload docs artifact
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: site/